using GenerationService.GrpcAutogenerated;
using Google.Protobuf.WellKnownTypes;
using Microsoft.AspNetCore.Mvc;
using ScriptFileBuilders.GrpcAutogenerated;
using Storefront.Clients;
using Storefront.Validators;

namespace Storefront.Api;

public static class ScriptsApi
{
    public static IEndpointRouteBuilder UseScriptsEndpoints(this IEndpointRouteBuilder app)
    {
        app.MapGet("/generation", GenerateScriptAsync).DisableRequestTimeout();
        app.MapGet("/histories", GetAllScriptGenerationsHistories);
        app.MapDelete("/histories", DeleteHistories);
        app.MapDelete("/histories/{id:int}", RemoveHistoryById);

        return app;
    }

    private static async ValueTask<IResult> GetAllScriptGenerationsHistories(
        [FromServices] ScriptGenerationHistoriesClient client,
        [FromServices] HistoryQueryParametersValidator validator,
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 10,
        [FromQuery] int dialect = -1,
        [FromQuery] int minQuantity = -1,
        [FromQuery] int maxQuantity = -1,
        [FromQuery] DateTime? dateTo = null,
        [FromQuery] DateTime? dateFrom = null,
        [FromQuery] DateTime? exactDate = null,
        [FromQuery] bool descending = false,
        [FromQuery] string sortBy = "RequestedAt",
        CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        var historyQueryParameters = new HistoryQueryParameters()
        {
            PaginationParameters = new PaginationParameters()
            {
                PageNumber = pageNumber,
                PageSize = pageSize,
            }, 
            FilterParameters = new FilterParameters()
            {
                Dialect = dialect,
                MinQuantity = minQuantity,
                MaxQuantity = maxQuantity,
                DateFrom = dateFrom.HasValue? Timestamp.FromDateTimeOffset(DateTime.SpecifyKind(dateFrom.Value.Date, DateTimeKind.Utc)) : null,
                DateTo = dateTo.HasValue? Timestamp.FromDateTimeOffset(DateTime.SpecifyKind(dateTo.Value.Date, DateTimeKind.Utc)) : null ,
                ExactDate = exactDate.HasValue? Timestamp.FromDateTime(DateTime.SpecifyKind(exactDate.Value.Date, DateTimeKind.Utc)) : null 
            },
            SortingParameters = new SortingParameters()
            {
                Descending = descending,
                SortBy = sortBy
            }
        };

        var validationResult = await validator.ValidateAsync(historyQueryParameters, cancellationToken);
        if (!validationResult.IsValid)
            return TypedResults.BadRequest(validationResult.ToString());
    
        var response = await client.GetAsync(historyQueryParameters, cancellationToken);

        return TypedResults.Ok(response); 
    }

    private static async ValueTask<IResult> GenerateScriptAsync(
        [FromServices] BuildRequestValidator validator,
        [FromServices] ScriptGenerationServiceClient client,
        [FromQuery] int quantity,
        [FromQuery] int dialect,
        HttpResponse response,
        CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        var request = new BuildRequest()
        {
            Quantity = quantity,
            Dialect = (DatabaseDialect)dialect
        };

        var validationResult = await validator.ValidateAsync(request, cancellationToken);
        if (!validationResult.IsValid)
            return TypedResults.BadRequest(validationResult.ToString());

        await foreach (var chunk in client.BuildAsync(request, cancellationToken))
        {
            await response.Body.WriteAsync(chunk, cancellationToken);
            await response.Body.FlushAsync(cancellationToken);
        }

        return Results.Empty;
    }

    private static async ValueTask<IResult> DeleteHistories(
        [FromServices] ScriptGenerationHistoriesClient client,
        CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        await client.DeleteAsync(cancellationToken);

        return TypedResults.Ok();
    }

    private static async ValueTask RemoveHistoryById(
        [FromRoute] int id,
        [FromServices] ScriptGenerationHistoriesClient client,
        CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        await client.RemoveHistoryByIdAsync(id, cancellationToken);
    }
}