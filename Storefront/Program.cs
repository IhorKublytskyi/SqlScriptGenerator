using Google.Protobuf.WellKnownTypes;
using Microsoft.AspNetCore.Mvc;
using Storefront;
using Storefront.Clients;
using Storefront.GrpcAutoGenerated;
using Storefront.Validators;

var builder = WebApplication.CreateBuilder(args);
var configuration = builder.Configuration;

builder.Services.AddScoped<ScriptBuildingClient>();
builder.Services.AddScoped<BuildRequestValidator>();
builder.Services.AddScoped<HistoryQueryParametersValidator>();
builder.Services.AddScoped<ScriptGenerationHistoriesClient>();
builder.Services.AddGrpcClient<ScriptFileBuilder.ScriptFileBuilderClient>(options =>
{
    options.Address = new Uri(configuration.GetValue<string>("ApiServiceUrl") ?? "https://localhost:7088");
});

builder.Services.AddGrpcClient<ScriptGenerationHistoriesService.ScriptGenerationHistoriesServiceClient>(options =>
{
    options.Address = new Uri(configuration.GetValue<string>("ApiServiceUrl") ?? "https://localhost:7088");
});

builder.AddServiceDefaults();

var app = builder.Build();

app.MapDefaultEndpoints();

//GET
app.MapGet("/histories", async (
    ScriptGenerationHistoriesClient client,
    HistoryQueryParametersValidator validator,
    [FromQuery] int pageNumber = 1,
    [FromQuery] int pageSize = 20,
    [FromQuery] int dialect = -1,
    [FromQuery] DateTime? dateTo = null,
    [FromQuery] DateTime? dateFrom = null)  =>
{
    var historyQueryParameters = new HistoryQueryParameters()
    {
        PaginationParameters = new PaginationParameters()
        {
            PageNumber = pageNumber,
            PageSize = pageSize,
        },
        Dialect = dialect,
        DateTo = dateTo.HasValue ? Timestamp.FromDateTime(dateTo.Value.ToUniversalTime()) : null,
        DateFrom = dateFrom.HasValue ? Timestamp.FromDateTime(dateFrom.Value.ToUniversalTime()) : null
    };

    var validationResult = validator.Validate(historyQueryParameters);
    if (!validationResult.IsValid)
        return Results.BadRequest(validationResult.ToString());
    
    var histories = await client.GetAsync(historyQueryParameters);

    return Results.Ok(histories); 
});

app.MapDelete("/histories", async (
    ScriptGenerationHistoriesClient client
    ) =>
{
    await client.DeleteAsync();
});

app.MapGet("/generation", async (
    [FromQuery] int quantity, 
    [FromQuery] int dialect,
    BuildRequestValidator validator,
    ScriptBuildingClient client) => 
{
    var request = new BuildRequest()
    {
        Quantity = quantity,
        Dialect = (DatabaseDialect)dialect
    };

    var validationResult = validator.Validate(request);
    if (!validationResult.IsValid)
         return Results.BadRequest(validationResult.ToString());

    var scriptFile = await client.BuildAsync(request);

    return Results.File(scriptFile, contentType: "application/sql", fileDownloadName: "script.sql");
});

app.Run();
