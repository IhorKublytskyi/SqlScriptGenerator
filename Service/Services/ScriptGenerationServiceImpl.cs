using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Service.GrpcAutoGenerated;
using Service.Interfaces;

namespace Service.Services
{
    public class ScriptGenerationServiceImpl : ScriptFileBuilder.ScriptFileBuilderBase
    {
        private readonly IScriptGeneratorFactory _scriptGeneratorFactory;
        private readonly ScriptGenerationHistoryRepository.ScriptGenerationHistoryRepositoryClient _repository;
        public ScriptGenerationServiceImpl(IScriptGeneratorFactory scriptGeneratorFactory, ScriptGenerationHistoryRepository.ScriptGenerationHistoryRepositoryClient repository)
        {
            _scriptGeneratorFactory = scriptGeneratorFactory;
            _repository = repository;
        }
        public override Task<BuildResponse> Build(BuildRequest request, ServerCallContext context)
        {
            var scriptGenerator = _scriptGeneratorFactory.GetGenerator(request.Dialect);
            var script = scriptGenerator.Generate(request.Quantity);

            var response = CreateResponseFromFile(script);

            var scriptGenerationHistory = new AddScriptGenerationHistoryRequest()
            {
                Quantity = request.Quantity,
                Dialect = request.Dialect,
                RequestedAt = DateTime.UtcNow.ToTimestamp()
            };

            _repository.Add(scriptGenerationHistory);

            return Task.FromResult(response);
        }
        private BuildResponse CreateResponseFromFile(string script)
        {
            var fullPath = WriteScriptToFile(script);

            using var fs = new FileStream(fullPath, FileMode.Open);
            byte[] buffer = new byte[fs.Length];
            fs.Read(buffer, 0, buffer.Length);

            return new BuildResponse()
            {
                Script = ByteString.CopyFrom(buffer)
            };
        }
        private string WriteScriptToFile(string script)
        {
            var tempDir = Path.Combine(Path.GetTempPath(), "MyAppScripts");
            Directory.CreateDirectory(tempDir);

            var fullPath = Path.Combine(tempDir, "script.sql");
            File.WriteAllText(fullPath, script);


            return fullPath;
        }
    }
}
