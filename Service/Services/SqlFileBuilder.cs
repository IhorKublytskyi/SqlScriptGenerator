using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Service.Interfaces;
using ScriptFileBuilders.GrpcAutogenerated;
using GenerationsData.GrpcAutogenerated;
using GenerationService.GrpcAutogenerated;

namespace Service.Services
{
    public class SqlFileBuilder : ScriptFileBuilder.ScriptFileBuilderBase//BUILDER
    {
        private readonly IScriptGeneratorFactory _scriptGeneratorFactory;
        private readonly ScriptGenerationHistoryRepository.ScriptGenerationHistoryRepositoryClient _repository;
        public SqlFileBuilder(IScriptGeneratorFactory scriptGeneratorFactory, ScriptGenerationHistoryRepository.ScriptGenerationHistoryRepositoryClient repository)
        {
            _scriptGeneratorFactory = scriptGeneratorFactory;
            _repository = repository;
        }
        public override async Task Build(BuildRequest request, IServerStreamWriter<StringValue> responseStream, ServerCallContext context)
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            var generator = _scriptGeneratorFactory.GetGenerator(request.Dialect);

            await foreach (var scriptPart in generator.GenerateAsync(request.Quantity, context.CancellationToken))
            {
                await responseStream.WriteAsync(new StringValue()
                {
                    Value = scriptPart
                });
            }

            var scriptGenerationHistory = new AddScriptGenerationHistoryRequest()
            {
                Quantity = request.Quantity,
                Dialect = request.Dialect,
                RequestedAt = DateTime.UtcNow.ToTimestamp()
            };

            await _repository.AddAsync(scriptGenerationHistory);
        }
    }
}
