using DataProvider.Models;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Microsoft.EntityFrameworkCore;
using GenerationsData.GrpcAutogenerated;
using GenerationService.GrpcAutogenerated;
using ScriptFileBuilders.GrpcAutogenerated;

namespace DataProvider.Repositories
{
    public class ScriptGenerationHistoriesRepository : ScriptGenerationHistoryRepository.ScriptGenerationHistoryRepositoryBase
    {
        private readonly AppDbContext _dbContext;
        public ScriptGenerationHistoriesRepository(AppDbContext dbContext)
        {
            _dbContext = dbContext;
        }
        public override async Task<ScriptGenerationHistoriesResponse> Get(HistoryQueryParameters request, ServerCallContext context)
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            var pageNumber = request.PaginationParameters.PageNumber;
            var pageSize = request.PaginationParameters.PageSize;

            var query = _dbContext.ScriptGenerationHistories.AsQueryable();
            if (request.FilterParameters.Dialect != -1)
                query = query.Where(h => h.Dialect == (DatabaseDialect)request.FilterParameters.Dialect);
            if (request.FilterParameters.DateTo != null)
                query = query.Where(h => h.RequestedAt <= request.FilterParameters.DateTo.ToDateTime());
            if(request.FilterParameters.DateFrom != null)
                query = query.Where(h => h.RequestedAt >= request.FilterParameters.DateFrom.ToDateTime());
            if(request.FilterParameters.MinQuantity != -1)
                query = query.Where(h => h.Quantity > request.FilterParameters.MinQuantity);
            if (request.FilterParameters.MaxQuantity != -1)
                query = query.Where(h => h.Quantity < request.FilterParameters.MaxQuantity);
            if (request.FilterParameters.ExactDate != null && request.FilterParameters.DateFrom == null && request.FilterParameters.DateTo == null)
                query = query.Where(h => h.RequestedAt.Date == request.FilterParameters.ExactDate.ToDateTime().Date);

            query = request.SortingParameters.SortBy switch
            {
                nameof(ScriptGenerationHistory.Dialect) => request.SortingParameters.Descending
                    ? query.OrderByDescending(h => h.Dialect)
                    : query.OrderBy(h => h.Dialect),

                nameof(ScriptGenerationHistory.Quantity) => request.SortingParameters.Descending
                    ? query.OrderByDescending(h => h.Quantity)
                    : query.OrderBy(h => h.Quantity),

                nameof(ScriptGenerationHistory.RequestedAt) => request.SortingParameters.Descending
                    ? query.OrderByDescending(h => h.RequestedAt)
                    : query.OrderBy(h => h.RequestedAt),

                _ => query.OrderBy(h => h.RequestedAt)
            };

            var histories = await query.AsNoTracking()
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .Select(h => new ScriptGenerationHistoryResponse()
                {
                    Id = h.Id,
                    Quantity = h.Quantity,
                    Dialect = h.Dialect,
                    RequestedAt = h.RequestedAt.ToTimestamp()
                })
                .ToListAsync(context.CancellationToken);

            var response = new ScriptGenerationHistoriesResponse();
            response.Histories.AddRange(histories);
            response.TotalCount = query.Count();

            return response;
        }
        public override async Task<Empty> Add(AddScriptGenerationHistoryRequest request, ServerCallContext context)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            
            var scriptGenerationHistory = new ScriptGenerationHistory()
            {
                Quantity = request.Quantity,
                Dialect = request.Dialect,
                RequestedAt = request.RequestedAt.ToDateTime().ToUniversalTime()
            };
            await _dbContext.AddAsync(scriptGenerationHistory, context.CancellationToken);
            await _dbContext.SaveChangesAsync(context.CancellationToken);

            return new Empty();
        }
        public override async Task<Empty> Delete(Empty request, ServerCallContext context)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            
            await _dbContext.ScriptGenerationHistories.ExecuteDeleteAsync(context.CancellationToken);

            return new Empty();
        }

        public override async Task<Empty> Remove(RemoveHistoryRequest request, ServerCallContext context)
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            var id = request.Id;

            await _dbContext.ScriptGenerationHistories
                .Where(h => h.Id == id)
                .ExecuteDeleteAsync(context.CancellationToken);

            return new Empty();
        }
    }
}
